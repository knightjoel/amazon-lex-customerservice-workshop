AWSTemplateFormatVersion: '2010-09-09'
Description: resources to make up lex bot
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  OperatorDDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: operatorName
        AttributeType: S
      KeySchema:
      - AttributeName: operatorName
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '3'
        WriteCapacityUnits: '3'
    Type: AWS::DynamoDB::Table
  WellsiteLocationDDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: wellSiteId
        AttributeType: S
      KeySchema:
      - AttributeName: wellSiteId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '3'
        WriteCapacityUnits: '3'
    Type: AWS::DynamoDB::Table
  WellsiteVisitDDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: wellSiteId
        AttributeType: S
      - AttributeName: dateOfLastVisit
        AttributeType: S
      KeySchema:
      - AttributeName: wellSiteId
        KeyType: HASH
      - AttributeName: dateOfLastVisit
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '3'
        WriteCapacityUnits: '3'
      TableName:
        Fn::Sub: ${AWS::StackName}-WellsiteVisit
    Type: AWS::DynamoDB::Table


  # BotHandlerFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Description: "Lambda handler for travel plan bot"
  #     FunctionName: !Sub "${AWS::StackName}-LexBotHandler"
  #     CodeUri: ../lambda-functions/bot-handler
  #     Runtime: nodejs4.3
  #     MemorySize: 256
  #     Timeout: 20
  #     Handler: index.handler
  #     Policies:
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - dynamodb:*
  #           Resource:
  #             - "*"
  #     Environment:
  #       Variables:
  #         USER_DDB_TABLE: !Ref UsersDDBTable
  #         USER_DDB_TABLE_PHONE_INDEX: "phoneindex"
  #         USER_PLAN_DDB_TABLE: !Ref UserTravelPlansDDBTable
  #         PLAN_CATALOGUE_DDB_TABLE: !Ref TravelPlanCatalogDDBTable

#  CognitoTriggerFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Description: "Lambda function to update the user DDB table when cognito user signs up."
#      CodeUri: ../lambda-functions/cognito-trigger
#      Runtime: nodejs4.3
#      MemorySize: 256
#      Timeout: 20
#      Handler: index.handler
#      Policies:
#        Statement:
#          - Effect: Allow
#            Action:
#              - dynamodb:*
#            Resource:
#              !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UsersDDBTable}"
#      Environment:
#        Variables:
#          USER_DDB_TABLE: !Ref UsersDDBTable

  DataLoaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Lambda function to load the plan catalog."
      CodeUri: ../lambda-functions/load-data
      Runtime: nodejs8.10
      MemorySize: 256
      Timeout: 20
      Handler: index.handler
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - '*'
      Environment:
        Variables:
          OPERATOR_DDB_TABLE:
            Ref: OperatorDDBTable
          WELL_SITE_LOCATION_DDB_TABLE:
            Ref: WellsiteLocationDDBTable
          WELL_SITE_VISIT_DDB_TABLE:
            Ref: WellsiteVisitDDBTable

  LoadPlanData:
    Properties:
      ServiceToken: !GetAtt DataLoaderFunction.Arn
    Type: "Custom::LoadDynamoDB"
